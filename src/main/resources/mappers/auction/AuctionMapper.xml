<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
 * 파일 경로: src/main/resources/mappers/AuctionMapper.xml
 * 설명: 경매 관련 SQL 쿼리를 정의하는 MyBatis 매퍼 XML 파일입니다.
-->
<mapper namespace="com.goodsple.features.admin.auction.mapper.AuctionMapper">

    <!-- 공통 검색 조건을 위한 SQL 조각 -->
    <sql id="searchCondition">
        <where>
            <if test="productName != null and productName != ''">
                AND a.auction_title LIKE CONCAT('%', #{productName}, '%')
            </if>
            <!-- status 값이 비어있지 않을 때만 조건을 추가하도록 수정 -->
            <if test="status != null and status != ''">
                AND a.auction_status = #{status}::auction_status_enum
            </if>
            <!-- 날짜 값이 null이 아닐 때만 조건을 추가하도록 수정 -->
            <if test="startDate != null">
                AND a.auction_start_time &gt;= #{startDate}::date
            </if>
            <if test="endDate != null">
                AND a.auction_start_time &lt; (#{endDate}::date + INTERVAL '1 day')
            </if>
        </where>
    </sql>

    <!-- 관리자용 경매 목록 조회 쿼리 -->
    <select id="findAuctions" resultType="com.goodsple.features.admin.auction.dto.response.AuctionAdminListResponse">
        SELECT
        a.auction_id AS id,
        a.auction_title AS productName,
        a.auction_start_time AS startTime,
        a.auction_end_time AS endTime,
        -- 최종가가 있으면 최종가, 없으면 현재 최고 입찰가를 현재가로 표시
        COALESCE(a.auction_final_price, (SELECT MAX(bid_amount) FROM bids WHERE auction_id = a.auction_id), a.auction_start_price) AS currentPrice,
        a.auction_status::text AS status,
        o.order_status::text AS paymentStatus
        FROM
        auctions a
        LEFT JOIN
        orders o ON a.auction_id = o.auction_id
        <include refid="searchCondition"/>
        ORDER BY
        a.auction_id DESC
        LIMIT #{size} OFFSET #{page} * #{size}
    </select>

    <!-- 관리자용 경매 목록 전체 개수 조회 쿼리 -->
    <select id="countAuctions" resultType="long">
        SELECT count(*)
        FROM auctions a
        <include refid="searchCondition"/>
    </select>

    <!-- 새로운 경매를 생성하는 쿼리 -->
    <insert id="insertAuction" parameterType="com.goodsple.features.admin.auction.entity.Auction"
            useGeneratedKeys="true" keyProperty="auctionId">
        INSERT INTO auctions (
            user_id, auction_title, auction_description, auction_start_price,
            auction_min_bid_unit, auction_start_time, auction_end_time, auction_status
        ) VALUES (
                     #{userId}, #{auctionTitle}, #{auctionDescription}, #{auctionStartPrice},
                     #{auctionMinBidUnit}, #{auctionStartTime}, #{auctionEndTime}, #{auctionStatus}::auction_status_enum
                 )
    </insert>

    <!-- 경매 이미지를 추가하는 쿼리 -->
    <insert id="insertAuctionImage">
        INSERT INTO auction_images (auction_id, auction_image_url)
        VALUES (#{auctionId}, #{imageUrl})
    </insert>

    <!-- 시간 중복 경매를 확인하는 쿼리 -->
    <select id="checkOverlappingAuction" resultType="int">
        SELECT COUNT(*)
        FROM auctions
        WHERE
            (auction_start_time, auction_end_time) OVERLAPS (#{startTime}, #{endTime})
          AND auction_status != 'cancelled'::auction_status_enum
    </select>

    <!-- 경매 상세 정보 조회를 위한 ResultMap -->
    <resultMap id="AuctionAdminDetailResultMap" type="com.goodsple.features.admin.auction.dto.response.AuctionAdminDetailResponse">
        <id property="id" column="auction_id"/>
        <result property="productName" column="auction_title"/>
        <result property="description" column="auction_description"/>
        <result property="startPrice" column="auction_start_price"/>
        <result property="minBidUnit" column="auction_min_bid_unit"/>
        <result property="startTime" column="auction_start_time"/>
        <result property="endTime" column="auction_end_time"/>
        <result property="status" column="auction_status"/>
        <collection property="imageUrls" ofType="java.lang.String">
            <result column="auction_image_url"/>
        </collection>
    </resultMap>

    <!-- 특정 경매의 상세 정보와 이미지 목록을 조회하는 쿼리 -->
    <select id="findAuctionDetailById" resultMap="AuctionAdminDetailResultMap">
        SELECT
            a.auction_id,
            a.auction_title,
            a.auction_description,
            a.auction_start_price,
            a.auction_min_bid_unit,
            a.auction_start_time,
            a.auction_end_time,
            a.auction_status::text as auction_status,
                ai.auction_image_url
        FROM
            auctions a
                LEFT JOIN
            auction_images ai ON a.auction_id = ai.auction_id
        WHERE
            a.auction_id = #{auctionId}
    </select>

    <!-- 수정을 위해 경매 엔티티 하나를 조회하는 쿼리 -->
    <select id="findAuctionForUpdate" resultType="com.goodsple.features.admin.auction.entity.Auction">
        SELECT
            auction_id as auctionId,
            auction_status::text as auctionStatus
        FROM auctions
        WHERE auction_id = #{auctionId}
    </select>

    <!-- 경매 정보를 수정하는 쿼리 (동적 SQL 사용) -->
    <update id="updateAuction" parameterType="com.goodsple.features.admin.auction.entity.Auction">
        UPDATE auctions
        <set>
            <if test="auctionTitle != null">auction_title = #{auctionTitle},</if>
            <if test="auctionDescription != null">auction_description = #{auctionDescription},</if>
            <if test="auctionStartPrice != null">auction_start_price = #{auctionStartPrice},</if>
            <if test="auctionMinBidUnit != null">auction_min_bid_unit = #{auctionMinBidUnit},</if>
            <if test="auctionStartTime != null">auction_start_time = #{auctionStartTime},</if>
            <if test="auctionEndTime != null">auction_end_time = #{auctionEndTime},</if>
            auction_updated_at = now()
        </set>
        WHERE auction_id = #{auctionId}
    </update>

    <!-- 특정 경매의 이미지들을 모두 삭제하는 쿼리 -->
    <delete id="deleteAuctionImages">
        DELETE FROM auction_images WHERE auction_id = #{auctionId}
    </delete>

    <!-- 경매 결과 조회를 위한 복합 ResultMap (수정) -->
    <resultMap id="AuctionAdminResultMap" type="com.goodsple.features.admin.auction.dto.response.AuctionAdminResultResponse">
        <!-- 기본 정보 -->
        <result property="productName" column="auction_title"/>
        <result property="imageUrl" column="auction_image_url"/>
        <result property="startPrice" column="auction_start_price"/>
        <result property="startTime" column="auction_start_time"/>
        <result property="endTime" column="auction_end_time"/>
        <result property="finalPrice" column="auction_final_price"/>
        <result property="status" column="auction_status"/>
        <result property="paymentStatus" column="order_status"/>

        <!-- 낙찰자 정보 -->
        <association property="winnerInfo" javaType="com.goodsple.features.admin.auction.dto.response.WinnerInfo">
            <result property="userId" column="winner_user_id"/>
            <result property="nickname" column="winner_nickname"/>
            <result property="phone" column="winner_phone"/>
        </association>

        <!-- 배송 정보 -->
        <association property="shippingInfo" javaType="com.goodsple.features.admin.auction.dto.response.ShippingInfo">
            <result property="name" column="shipping_recipient_name"/>
            <result property="phone" column="shipping_recipient_phone"/>
            <result property="address" column="shipping_address"/>
            <result property="message" column="shipping_memo"/>
        </association>

        <!-- 입찰 기록 (수정된 부분) -->
        <!-- select 속성을 이용해 별도의 쿼리를 호출하여 채웁니다. -->
        <!-- column="auction_id"는 메인 쿼리 결과의 auction_id 값을 서브 쿼리의 파라미터로 넘기라는 의미입니다. -->
        <collection property="bidHistory"
                    select="findAdminBidHistoryByAuctionId"
                    column="auction_id"
                    ofType="com.goodsple.features.admin.auction.dto.response.BidHistoryInfo"/>
    </resultMap>

    <!-- 경매 결과 상세 정보 조회 쿼리 (수정) -->
    <!-- bids 테이블과의 JOIN을 제거하여 더 단순하고 명확하게 만듭니다. -->
    <select id="findAuctionResultById" resultMap="AuctionAdminResultMap">
        SELECT
            a.auction_id, -- collection의 column 속성으로 넘겨주기 위해 추가
            a.auction_title,
            (SELECT auction_image_url FROM auction_images WHERE auction_id = a.auction_id LIMIT 1) AS auction_image_url,
            a.auction_start_price,
            a.auction_start_time,
            a.auction_end_time,
            a.auction_final_price,
            a.auction_status::text AS auction_status,
            o.order_status::text AS order_status,
            winner.user_id AS winner_user_id,
            winner.nickname AS winner_nickname,
            winner.phone_number AS winner_phone,
            si.shipping_recipient_name,
            si.shipping_recipient_phone,
            CONCAT(si.shipping_address1, ' ', si.shipping_address2) AS shipping_address,
            si.shipping_memo
        FROM
            auctions a
            LEFT JOIN
            users winner ON a.auction_winning_user_id = winner.user_id
            LEFT JOIN
            orders o ON a.auction_id = o.auction_id
            LEFT JOIN
            shipping_info si ON o.order_id = si.order_id
        WHERE
            a.auction_id = #{auctionId}
    </select>

    <!-- 관리자용 입찰 내역 조회 쿼리 (프론트엔드 타입에 맞춤) -->
    <select id="findAdminBidHistoryByAuctionId" resultType="com.goodsple.features.admin.auction.dto.response.BidHistoryInfo">
        SELECT
            b.bid_created_at AS time,
        u.nickname AS bidder,
        b.bid_amount AS price
        FROM
            bids b
            JOIN
            users u ON b.user_id = u.user_id
        WHERE
            b.auction_id = #{auctionId}
        ORDER BY
            b.bid_created_at DESC
    </select>

    <!-- 입찰 기록만 조회하는 새로운 서브 쿼리 (수정) -->
    <select id="findBidHistoryByAuctionId" resultType="com.goodsple.features.auction.dto.response.BidHistoryInfo">
        SELECT
            b.bid_id AS bidId,
            u.user_id AS userId, -- userId를 추가로 조회합니다.
            u.nickname AS userNickname,
            b.bid_amount AS bidAmount,
            b.bid_created_at AS timestamp
        FROM
            bids b
            JOIN
            users u ON b.user_id = u.user_id
        WHERE
            b.auction_id = #{auctionId}
        ORDER BY
            b.bid_created_at DESC
    </select>

    <!-- 경매 상태를 변경하는 쿼리 -->
    <update id="updateAuctionStatus">
        UPDATE auctions
        SET
            auction_status = #{status}::auction_status_enum,
            auction_updated_at = now()
        WHERE
            auction_id = #{auctionId}
    </update>

    <!-- 사용자용 라이브 경매 페이지 데이터 조회를 위한 ResultMap -->
    <resultMap id="AuctionPageDataResultMap" type="com.goodsple.features.auction.dto.response.AuctionPageDataResponse">
        <association property="itemInfo" javaType="com.goodsple.features.auction.dto.response.AuctionPageDataResponse$ItemInfo">
            <result property="id" column="auction_id"/>
            <result property="title" column="auction_title"/>
            <result property="description" column="auction_description"/>
            <collection property="images" ofType="java.lang.String"
                        select="findImageUrlsByAuctionId" column="auction_id"/>
        </association>
        <association property="status" javaType="com.goodsple.features.auction.dto.response.AuctionPageDataResponse$AuctionStatus">
            <result property="auctionStatus" column="auction_status"/>
            <result property="startTime" column="auction_start_time"/>
            <result property="endTime" column="auction_end_time"/>
            <result property="startPrice" column="auction_start_price"/>
            <result property="currentPrice" column="current_price"/>
            <result property="highestBidderNickname" column="top_bidder_nickname"/>
            <result property="minBidUnit" column="auction_min_bid_unit"/>
        </association>
        <association property="currentUser" javaType="com.goodsple.features.auction.dto.response.AuctionPageDataResponse$CurrentUser">
            <result property="isBanned" column="is_banned_from_auction"/>
        </association>
        <collection property="bidHistory" ofType="com.goodsple.features.auction.dto.response.BidHistoryInfo"
                    select="findBidHistoryByAuctionId" column="auction_id"/>
        <collection property="chatHistory" ofType="com.goodsple.features.auction.dto.response.AuctionPageDataResponse$ChatMessageInfo"
                    select="findChatHistoryByAuctionId" column="auction_id"/>
    </resultMap>

    <!-- 사용자용 라이브 경매 페이지 메인 쿼리 -->
    <select id="findAuctionPageDataById" resultMap="AuctionPageDataResultMap">
        SELECT
            a.auction_id,
            a.auction_title,
            a.auction_description,
            a.auction_start_time,
            a.auction_end_time,
            a.auction_start_price,
            a.auction_min_bid_unit,
            a.auction_status::text AS auction_status,
        -- 현재 최고가는 Redis에 있을 수 있으므로, DB에서는 일단 시작가를 기본값으로 조회
                a.auction_start_price AS current_price,
            '없음' AS top_bidder_nickname, -- 최고 입찰자는 Redis에서 가져오므로 DB에서는 기본값 설정
            -- 현재 로그인한 사용자의 밴 여부를 조회 (파라미터로 userId를 받아야 함)
            (SELECT u.is_banned_from_auction FROM users u WHERE u.user_id = #{userId}) AS is_banned_from_auction
        FROM
            auctions a
        WHERE
            a.auction_id = #{auctionId}
    </select>

    <!-- 서브 쿼리: 이미지 URL 목록 조회 -->
    <select id="findImageUrlsByAuctionId" resultType="java.lang.String">
        SELECT auction_image_url FROM auction_images WHERE auction_id = #{auctionId}
    </select>

    <!-- 서브 쿼리: 채팅 내역 조회 (최근 50개) -->
    <select id="findChatHistoryByAuctionId" resultType="com.goodsple.features.auction.dto.response.AuctionPageDataResponse$ChatMessageInfo">
        SELECT
            c.chat_message_id as chatId,
            u.nickname as userNickname,
            c.chat_message as message,
            c.chat_created_at as timestamp
        FROM
            auction_chat_messages c
            JOIN
            users u ON c.user_id = u.user_id
        WHERE
            c.auction_id = #{auctionId}
        ORDER BY
            c.chat_created_at DESC
            LIMIT 50
    </select>

    <!-- Redis 초기화를 위한 경매 정보 조회 쿼리 -->
    <select id="findInitialAuctionStateById" resultType="com.goodsple.features.auction.dto.AuctionState">
        SELECT
            auction_id AS auctionId,
            auction_start_price AS currentPrice, -- 시작 시에는 시작가가 현재가
            auction_min_bid_unit AS minBidUnit,
            auction_end_time AS endTime
        FROM
            auctions
        WHERE
            auction_id = #{auctionId}
    </select>

    <!-- 시작 시간이 된 '예정' 상태의 경매를 조회하는 쿼리 -->
    <select id="findAuctionsToStart" resultType="com.goodsple.features.auction.dto.AuctionState">
        SELECT
            auction_id AS auctionId,
            auction_start_price AS currentPrice,
            auction_min_bid_unit AS minBidUnit,
            auction_end_time AS endTime
        FROM
            auctions
        WHERE
            auction_status = 'scheduled'::auction_status_enum
        AND auction_start_time &lt;= #{now}
    </select>

    <!-- 종료 시간이 된 '진행중' 상태의 경매 ID 목록을 조회하는 쿼리 -->
    <select id="findAuctionsToEnd" resultType="java.lang.Long">
        SELECT auction_id
        FROM auctions
        WHERE
            auction_status = 'active'::auction_status_enum
        AND auction_end_time &lt;= #{now}
    </select>

    <!-- 경매 종료 시 최종 낙찰자 정보를 업데이트하는 쿼리 -->
    <update id="updateAuctionWinner">
        UPDATE auctions
        SET
            auction_winning_user_id = #{winnerId},
            auction_final_price = #{finalPrice}
        WHERE
            auction_id = #{auctionId}
    </update>

    <!-- 여러 입찰 기록을 한 번에 저장하는 쿼리 (Batch Insert) -->
    <insert id="insertBidsBatch" parameterType="java.util.List">
        INSERT INTO bids (auction_id, user_id, bid_amount, bid_created_at)
        VALUES
        <foreach collection="list" item="bid" separator=",">
            (#{bid.auctionId}, #{bid.userId}, #{bid.bidAmount}, #{bid.bidCreatedAt})
        </foreach>
    </insert>

    <insert id="insertOrder" parameterType="com.goodsple.features.order.entity.Order">
        INSERT INTO orders (
            auction_id,
            user_id,
            order_amount,
            order_status,
            order_payment_deadline -- [추가]
        ) VALUES (
                     #{auctionId},
                     #{userId},
                     #{orderAmount},
                     #{orderStatus}::order_status_enum,
                     #{orderPaymentDeadline} -- [추가]
                 )
    </insert>

    <!-- 닉네임으로 사용자 ID를 조회하는 쿼리 -->
    <select id="findUserIdByNickname" resultType="java.lang.Long">
        SELECT user_id
        FROM users
        WHERE nickname = #{nickname}
    </select>

    <!-- 사용자 메인 페이지용 대표 경매 조회 쿼리 (수정) -->
    <select id="findMainAuction" resultType="com.goodsple.features.auction.dto.response.UserMainAuctionDto">
        SELECT
            a.auction_id AS auctionId,
            a.auction_title AS auctionTitle,
            (SELECT ai.auction_image_url FROM auction_images ai WHERE ai.auction_id = a.auction_id LIMIT 1) AS imageUrl,
        a.auction_start_price AS startPrice,
        -- 진행중 경매는 현재가, 예정 경매는 시작가를 currentPrice로 설정
        CASE
            WHEN a.auction_status = 'active' THEN COALESCE((SELECT MAX(b.bid_amount) FROM bids b WHERE b.auction_id = a.auction_id), a.auction_start_price)
            ELSE a.auction_start_price
        END AS currentPrice,
        a.auction_start_time AS startTime,
        a.auction_end_time AS endTime,
        a.auction_status::text AS status
    FROM
        auctions a
    WHERE
        a.auction_status IN ('active'::auction_status_enum, 'scheduled'::auction_status_enum)
    ORDER BY
        -- 1순위: 'active' 상태가 먼저 오도록 정렬
        CASE a.auction_status
            WHEN 'active'::auction_status_enum THEN 1
            WHEN 'scheduled'::auction_status_enum THEN 2
            ELSE 3
        END,
        -- 2순위: 'active'는 종료 임박 순, 'scheduled'는 시작 임박 순으로 정렬
        CASE a.auction_status
            WHEN 'active'::auction_status_enum THEN a.auction_end_time
            ELSE a.auction_start_time
        END ASC
    LIMIT 1
    </select>

    <select id="findUpcomingAuctions" resultType="com.goodsple.features.auction.dto.response.UserMainAuctionDto">
        SELECT
            a.auction_id AS auctionId,
            a.auction_title AS auctionTitle,
            (SELECT ai.auction_image_url FROM auction_images ai WHERE ai.auction_id = a.auction_id LIMIT 1) AS imageUrl,
        a.auction_start_price AS startPrice,
        a.auction_start_price AS currentPrice,
        a.auction_start_time AS startTime,
        a.auction_end_time AS endTime,
        a.auction_status::text AS status
        FROM auctions a
        WHERE a.auction_status = 'scheduled'::auction_status_enum
          AND a.auction_id != #{excludeId}
        ORDER BY a.auction_start_time ASC
            LIMIT #{limit}
    </select>

    <select id="findRecentlyEndedAuctions" resultType="com.goodsple.features.auction.dto.response.UserMainAuctionDto">
        SELECT
            a.auction_id AS auctionId,
            a.auction_title AS auctionTitle,
            (SELECT ai.auction_image_url FROM auction_images ai WHERE ai.auction_id = a.auction_id LIMIT 1) AS imageUrl,
        a.auction_start_price AS startPrice,
        a.auction_final_price AS currentPrice, -- 종료된 경매는 현재가가 최종가
        a.auction_start_time AS startTime,
        a.auction_end_time AS endTime,
        a.auction_status::text AS status
        FROM auctions a
        WHERE a.auction_status = 'ended'::auction_status_enum
        ORDER BY a.auction_end_time DESC
            LIMIT #{limit}
    </select>

    <select id="findOverdueOrders" resultType="com.goodsple.features.order.entity.Order">
        SELECT order_id, user_id
        FROM orders
        WHERE order_status = 'pending'::order_status_enum
          AND order_payment_deadline &lt;= #{now}
    </select>

    <update id="updateOrderStatusToExpired">
        UPDATE orders
        SET order_status = 'expired'::order_status_enum,
            order_updated_at = now()
        WHERE order_id = #{orderId}
    </update>

    <update id="applyAuctionPenaltyToUser">
        UPDATE users
        SET is_banned_from_auction = true,
            auction_ban_until = #{banUntil}
        WHERE user_id = #{userId}
    </update>

    <select id="findUserForAuctionBanCheck" resultType="com.goodsple.features.auth.entity.User">
        SELECT
            user_id as userId,
            is_banned_from_auction as isBannedFromAuction,
            auction_ban_until as auctionBanUntil
        FROM users
        WHERE user_id = #{userId}
    </select>

    <update id="releaseAuctionBan">
        UPDATE users
        SET
            is_banned_from_auction = false,
            auction_ban_until = null
        WHERE
            user_id = #{userId}
    </update>
</mapper>