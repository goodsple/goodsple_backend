<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.goodsple.features.auth.mapper.UserMapper">

    <insert id="createUser" parameterType="com.goodsple.features.auth.entity.User">
        INSERT INTO users (
            login_id, password, name, nickname, email,
            phone_number, birth_date, gender, role,
            suspension_status, login_type, is_banned_from_auction, kakao_id
        ) VALUES (
                     #{loginId}, #{password}, #{name}, #{nickname}, #{email},
                     #{phoneNumber}, #{birthDate},
                     #{gender, jdbcType=OTHER},
                     #{role, jdbcType=OTHER},
                     #{suspensionStatus, jdbcType=OTHER},
                     #{loginType, jdbcType=OTHER},
                     #{isBannedFromAuction}, #{kakaoId}
                 )
    </insert>

    <select id="existsByLoginId" parameterType="String" resultType="java.lang.Boolean">
        SELECT EXISTS(SELECT 1 FROM users WHERE login_id = #{loginId})
    </select>

    <select id="existsByNickname" parameterType="String" resultType="java.lang.Boolean">
        SELECT EXISTS(SELECT 1 FROM users WHERE nickname = #{nickname})
    </select>

    <select id="existsByEmail" parameterType="String" resultType="java.lang.Boolean">
        SELECT EXISTS(SELECT 1 FROM users WHERE email = #{email})
    </select>

    <select id="existsByPhoneNumber" parameterType="String" resultType="java.lang.Boolean">
        SELECT EXISTS(SELECT 1 FROM users WHERE phone_number = #{phoneNumber})
    </select>

    <select id="findByLoginId"
            parameterType="String"
            resultMap="UserResultMap">
        SELECT
            user_id,
            login_id,
            password,
            name,
            nickname,
            email,
            phone_number,
            birth_date::date   AS birth_date,
            gender,
            role,
            profile_image,
            suspension_status,
            suspended_until,
            user_created_at,
            user_updated_at,
            login_type,
            kakao_id,
            is_banned_from_auction
        FROM users
        WHERE login_id = #{loginId}
    </select>

    <select id="findByKakaoId" resultMap="UserResultMap" parameterType="String">
        SELECT
            user_id,
            login_id,
            password,
            name,
            nickname,
            email,
            phone_number,
            birth_date::date  AS birth_date,
                gender,
            role,
            profile_image,
            suspension_status,
            suspended_until,
            user_created_at,
            user_updated_at,
            login_type,
            kakao_id,
            is_banned_from_auction
        FROM users
        WHERE kakao_id = #{kakaoId}
    </select>

    <!-- userId로 사용자 정보를 조회 -->
    <select id="findById" parameterType="long" resultMap="UserResultMap">
        SELECT
            user_id,
            login_id,
            password,
            name,
            nickname,
            email,
            phone_number,
            birth_date::date  AS birth_date,
            gender,
            role,
            profile_image,
            suspension_status,
            suspended_until,
            user_created_at,
            user_updated_at,
            login_type,
            kakao_id,
            is_banned_from_auction
        FROM users
        WHERE user_id = #{userId}
    </select>

    <!-- 이메일로 유저 조회 -->
    <select id="findByEmail"
            parameterType="string"
            resultMap="UserResultMap">
        SELECT
            user_id,
            login_id,
            password,
            name,
            nickname,
            email,
            phone_number,
            birth_date::date    AS birth_date,
                gender,
            role,
            profile_image,
            suspension_status,
            suspended_until,
            user_created_at,
            user_updated_at,
            login_type,
            kakao_id,
            is_banned_from_auction
        FROM users
        WHERE email = #{email}
    </select>

    <!-- 아이디 찾기   -->
    <select id="existsByNameAndEmail"
            parameterType="map"
            resultType="boolean">
        SELECT EXISTS(
            SELECT 1
            FROM users
            WHERE name  = #{name}
              AND email = #{email}
        )
    </select>

    <insert id="insertFindIdCode">
        INSERT INTO find_id_code(email, code, expires_at)
        VALUES(#{email}, #{code}, #{expiresAt})
    </insert>

    <select id="selectFindIdCode" resultType="string">
        SELECT code
        FROM find_id_code
        WHERE email = #{email}
          AND code  = #{code}
          AND expires_at &gt; #{now}
    </select>

    <select id="selectLoginIdByNameAndEmail" resultType="string">
        SELECT login_id
        FROM users
        WHERE name = #{name}
          AND email = #{email}
    </select>

<!-- 비밀번호 찾기 -->
    <!-- 1. 아이디 + 이메일로 사용자 조회 -->
    <select id="selectByLoginIdAndEmail" resultType="com.goodsple.features.auth.entity.User">
        SELECT *
        FROM users
        WHERE login_id = #{loginId}
          AND email = #{email}
    </select>

    <!-- 2. 비밀번호 업데이트 -->
    <update id="updatePassword">
        UPDATE users
        SET password = #{password}
        WHERE user_id = #{userId}
    </update>

    <insert id="insertResetPasswordCode">
        INSERT INTO reset_password_code(email, code, expires_at)
        VALUES(#{email}, #{code}, #{expiresAt})
    </insert>

    <select id="selectResetPasswordCode" resultType="string">
        SELECT code
        FROM reset_password_code
        WHERE email = #{email}
          AND code  = #{code}
          AND expires_at &gt; #{now}
    </select>

    <!-- 0) 명시적 resultMap 추가 -->
    <resultMap id="UserResultMap" type="com.goodsple.features.auth.entity.User">
        <id     property="userId"              column="user_id" />
        <result property="loginId"             column="login_id" />
        <result property="password"            column="password" />
        <result property="name"                column="name" />
        <result property="nickname"            column="nickname" />
        <result property="email"               column="email" />
        <result property="phoneNumber"         column="phone_number" />
        <result property="birthDate"
                column="birth_date"
                javaType="java.time.LocalDate"
                jdbcType="DATE"
                typeHandler="com.goodsple.typehandler.LocalDateDomainTypeHandler"/>
        <result property="gender"              column="gender"
                typeHandler="com.goodsple.typehandler.GenderTypeHandler"/>
        <result property="role"                column="role"
                typeHandler="com.goodsple.typehandler.RoleTypeHandler"/>
        <result property="profileImage"        column="profile_image" />
        <result property="suspensionStatus"    column="suspension_status"
                typeHandler="com.goodsple.typehandler.SuspensionStatusTypeHandler"/>
        <result property="suspendedUntil"
                column="suspended_until"
                javaType="java.time.OffsetDateTime"
                jdbcType="OTHER"/>
        <result property="userCreatedAt"
                column="user_created_at"
                javaType="java.time.OffsetDateTime"
                jdbcType="OTHER"/>
        <result property="userUpdatedAt"
                column="user_updated_at"
                javaType="java.time.OffsetDateTime"
                jdbcType="OTHER"/>
        <result property="loginType"           column="login_type"
                typeHandler="com.goodsple.typehandler.LoginTypeTypeHandler"/>
        <result property="kakaoId"             column="kakao_id" />
        <result property="isBannedFromAuction" column="is_banned_from_auction" />
    </resultMap>

    <resultMap id="ProfileResultMap" type="com.goodsple.features.auth.entity.User">
        <id     column="user_id"       property="userId"/>
        <result column="login_id"      property="loginId"/>
        <result column="password"      property="password"/>
        <result column="profile_image" property="profileImage"/>
        <result column="name"          property="name"/>
        <result column="nickname"      property="nickname"/>
        <result column="email"         property="email"/>
        <result column="phone_number"  property="phoneNumber"/>
        <result column="birth_date"    property="birthDate"
                javaType="java.time.LocalDate"
                jdbcType="DATE"
                typeHandler="com.goodsple.typehandler.LocalDateDomainTypeHandler"/>
        <result column="gender"        property="gender"
                javaType="com.goodsple.features.auth.enums.Gender"
                jdbcType="OTHER"
                typeHandler="com.goodsple.typehandler.GenderTypeHandler"/>
        <result column="login_type"    property="loginType"
                javaType="com.goodsple.features.auth.enums.LoginType"
                jdbcType="OTHER"
                typeHandler="com.goodsple.typehandler.LoginTypeTypeHandler"/>
    </resultMap>

    <!-- 1) 내 프로필 조회 -->
    <select id="selectMyProfile"
            parameterType="long"
            resultMap="ProfileResultMap">
        SELECT
            user_id,
            login_id,
            password,
            profile_image,
            name,
            nickname,
            email,
            phone_number,
            birth_date::date  AS birth_date,
            gender::text        AS gender,
            login_type
        FROM users
        WHERE user_id = #{userId}
    </select>

    <!-- 2) 내 프로필 수정: 모든 사용자 업데이트 가능, 단 이메일은 LOCAL 로그인만 -->
    <update id="updateMyProfile"
            parameterType="com.goodsple.features.auth.entity.User">
        UPDATE users
        <set>
            <if test="profileImage != null">
                profile_image = #{profileImage},
            </if>
            <if test="name != null">
                name = #{name},
            </if>
            <if test="nickname != null">
                nickname = #{nickname},
            </if>
            <if test="phoneNumber != null">
                phone_number = #{phoneNumber},
            </if>
            <if test="password != null and password != ''">
                password = #{password},
            </if>
            <!-- 이메일은 LOCAL 로그인한 사용자만 업데이트 -->
            <if test="@com.goodsple.features.auth.enums.LoginType@LOCAL.equals(loginType) and email != null">
                email = #{email},
            </if>
        </set>
        WHERE user_id = #{userId}
    </update>

    <!-- 3) 내 계정 삭제(탈퇴) -->
    <delete id="deleteMyProfile"
            parameterType="long">
        DELETE FROM users
        WHERE user_id = #{userId}
          AND login_type = 'local'
    </delete>
</mapper>